---
- hosts: ffw-test
  user: '{{adminuser}}'
  become: true

  vars_files:
    - vagrant-vars/vagrant_variables.yml

  vars:
    ansible_ssh_user: '{{adminuser}}'                         # We need to override this to use the admin user as
                                                              # the root account will be locked by this point
    environment_path: /home/ffw_cms/ffwprojectenv             # this is the virtual environment project folder
    environment_name : env_projectname
    project_root: ~/FreeFlowWines
    project_name: ffwproject
    project_repo: https://github.com/nherriot/FreeFlowWine.git
    django_settings: wine.settings
    gunicorn_conf_file: 'host-vars/gunicorn.conf'
    nginx_conf_file: 'host-vars/ffwecommerce'
    git_branch: production

  pre_tasks:

    ##################################################
    # The simplest task - check we can ping our server
    - name: Check that the server's alive!
      action: ping
    # Update the machines before installing any software
    - name: Update machines
      apt: update_cache=yes cache_valid_time=3600

  handlers:
    # This restarts our nginx which servers requests for our web server
    # Reload Nginx to fully enable our site
    - name: Reload Nginx to enable the site
      become_user: '{{adminuser}}'
      service: name=nginx state=reloaded enabled=yes

    # This is our re-start. Same as start but start calls up the configure after it's started
    - name: Re-starting Postgres DB
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql

    # This restarts our postgres database only once we have it installed
    - name: Starting Postgres DB
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql
      notify:
        - Setup Postgres DB
        - Setup Postgres User can Access DB
        - Ensure Postgres user does not have unnecessary privileges

    # This set up postgres for the first time. I
    # Setup Postgres Database on the system
    - name: Setup Postgres DB
      become_user: postgres
      postgresql_db: name='{{dbname}}'

    - name: Setup Postgres User can Access DB
      become_user: postgres
      postgresql_user: db='{{dbname}}' name='{{dbuser}}' password='{{dbpassword}}' priv=ALL

    - name: Ensure Postgres user does not have unnecessary privileges
      become_user: postgres
      postgresql_user: name='{{dbuser}}' role_attr_flags=NOSUPERUSER,NOCREATEDB


  tasks:
    # Install required software components to build our server
    - name: Install Sofware ( python-pip, python-dev, libpq-dev, postgresql, postgresql-contrib psycopg2 and nginx )
      apt: name={{item}} state=present
      notify: Starting Postgres DB
      with_items:
        - python-pip
        - python-dev
        - python-setuptools
        - python-tk
        - liblcms2-dev
        - libfreetype6-dev
        - libjpeg8-dev
        - libpq-dev
        - libtiff5-dev
        - libwebp-dev
        - postgresql
        - postgresql-contrib
        - nginx
        - python-psycopg2
        - git
        - tcl8.6-dev
        - tk8.6-dev
        - zlib1g-dev

    # This starts our postgres sql database
    - name: Starting Postgres DB
      service: name={{item}} state=started enabled=yes
      with_items:
        - postgresql

    # This set up postgres for the first time
    - name: Setup Postgres DB
      become_user: postgres
      postgresql_db: name='{{dbname}}'

    - name: Setup Postgres User can Access DB
      become_user: postgres
      postgresql_user: db='{{dbname}}' name='{{dbuser}}' password='{{dbpassword}}' priv=ALL
      postgresql_user: name='{{dbuser}}' role_attr_flags=NOSUPERUSER,NOCREATEDB


    # Setup django and gunicorn wsgi server this has to install virtual env, then as the CMS user it then uses the PIP
    # module to create the virtual environment and the python version that will be used for this.
    - name: Install a virtual environment
      #become_user: '{{cmsuser}}'
      pip: name=virtualenv state=present

    - name: Create virtualenv with django installed in it as ffw_cms user
      become_user: '{{cmsuser}}'
      pip: name=django version=1.9.2 virtualenv={{environment_path}} virtualenv_python=python2.7


    # We can install all packages we need from git by taking our build straight from the 'production' branch
    - name: Clone project from git branch 'production'
      become_user: '{{cmsuser}}'
      git:
        repo={{project_repo}}
        dest={{project_root}}
        remote=origin version={{git_branch}}

    # Give read and write permissions to the virtual environment path
    #- name: change permissions
    #  shell: chmod 777 {{environment_path}}

    # This installs all our packages from the requirements.txt file in our repository
    - name: Install dependencies into virtualenv (i.e. install requirements.txt)
      become_user: ffw_cms
      action: pip requirements={{project_root}}/{{project_name}}/requirements.txt virtualenv={{environment_path}} state=present

    # Run the makemigrations on the insalled django app in 'django_dir'. This only migrates the initial django DB
    - name: Django Migrate DB Tables - only migrate initial tables
      become_user: ffw_cms
      django_manage: command=migrate {{item}}
        virtualenv={{environment_path}}
        app_path={{project_root}}/{{project_name}}
      with_items:
        - accounts
        - admin
        - auth
        - cms
        - contenttypes
        - profiles
        - registration
        - sessions
        - sites


    # Collect static files from the installed directories to where ther are served from. This is controlled in the
    # settings.py file
    - name: Django Collectstatic Files
      become_user: ffw_cms
      django_manage: command=collectstatic
        virtualenv={{environment_path}}
        app_path={{project_root}}/{{project_name}}
        #settings={{django_settings}}


    # Create an initial superuser.
    - name: Django Create Super User
      become_user: ffw_cms
      django_manage: command="createsuperuser --noinput --username=admin --email=admin@example.com"
        virtualenv={{environment_path}}
        app_path={{project_root }}/{{project_name}}

    # Configure our gunicorn wsgi server. We need to copy our gunicorn.conf file across to the server.
    - name: Copy 'gunicorn.con' And 'ffwecommerce' Nginx Config To Our Server
      become_user: root
      copy: src={{item.file_name}} dest={{item.destination_directory}} owner=root group=root mode="u=r,g=r,o=rw"
      with_items:
        - { file_name: '{{gunicorn_conf_file}}', destination_directory: '/etc/init' }
        - { file_name: '{{nginx_conf_file}}', destination_directory: '/etc/nginx/sites-available' }

    # Start the gunicorn wsgi server.
    - name: Start Gunicorn WSGI Server
      become_user: root
      service: name=gunicorn state=started enabled=yes

    # Restart the nginx server.
    - name: Restart the Nginx Server
      become_user: root
      service: name=nginx state=started enabled=yes


    # Map the configuration files directory in Nginx to the enabled directory.
    # This has the effect of enabling the configuration folder to be mapped to
    # the live working path.
    - name: Link ffecomerce Nginx config file in sites-available to sites-enabled
      become_user: root
      file: src=/etc/nginx/sites-available/ffwecommerce dest=/etc/nginx/sites-enabled/ffwecommerce state=link
      notify: Reload Nginx to enable the site

    # Reload Nginx to fully enable our site
    - name: Reload Nginx to enable the site main
      become_user: root
      service: name=nginx state=reloaded enabled=yes

    # Reload the gunicorn wsgi server.
    - name: Reload Gunicorn WSGI Server
      become_user: root
      service: name=gunicorn state=reloaded enabled=yes

